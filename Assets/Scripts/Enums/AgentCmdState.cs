// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

/// <summary>
/// 직원의 상태
/// AgentCmdState에 따라 AgentCommand들이 만들어진다.
/// </summary>
public enum AgentCmdState
{
    IDLE, // no command
    WORKING, // working command
    CAPTURE_BY_CREATURE, // 환상체에게 공격당함
    CAPTURE_BY_AGENT, // 직원에게 공격당함

    PANIC_SUPPRESS_TARGET, // 제압당하는 중

    ESCAPE_WORKING,
    SUPPRESS_WORKING, // 제압중
    OPEN_ROOM,

    OPEN_DOOR,

    RETURN_CREATURE, // 환상체 돌려보내는 중

    PANIC_VIOLENCE, // 직원 공격 중
    RUN_AWAY, // 도망중
    DEAD
}
/// <summary>
/// AgentCommand 클래스에서 사용하는 명령어들.
/// 이동, 작업 등 기본적인 명령어들로 이루어져 있다.
/// 하나의 AgentCmdState는 일련의 AgentCommand들로 이루어져 있다.
/// 
/// AgentCmdState가 WORKING일 경우, (MOVE, WORKING)으로 이루어져 있다.
/// 
/// </summary>
public enum AgentCmdType
{
    NONE,
    MOVE,
    MANAGE_CREATURE, // 격리소에 있는 환상체 관리
    CAPTURE_BY_CREATURE, // 환상체에게 붙잡힘
    CAPTURE_BY_AGENT, // 패닉 직원에게 붙잡힘

    PANIC_SUPPRESS_TARGET, // 제압당하는 중

    ESCAPE_WORKING,
    SUPPRESS_WORKING, // 제압중
    OPEN_ROOM,

    RETURN_CREATURE, // 환상체 돌려보내는 중

    OPEN_DOOR,

    PANIC_VIOLENCE, // 직원 패닉상태에서 공격 중
    DEAD
}

public enum OfficerCmdState { 
    START,
    IDLE,
    MEMO,
    CHAT,
    DOCUMENT,
    WORKING,
    PANIC,
    RETURN,
    DEAD
}

public class AgentCommand
{
    public AgentCmdType type;

    // parameters
    //public ObjectModelBase targetObject;
    public CreatureModel targetCreature;
    public AgentModel targetAgent;

    public MovableObjectNode targetNode;
    public DoorObjectModel targetDoor;

    public ActionClassBase action;

    public bool isFinished = false;

    /// <summary>
    /// 해당 command가 실행되기 시작할 때 호출됩니다.
    /// </summary>
    /// <param name="agent"></param>
    public virtual void OnStart(WorkerModel agent)
    {
    }

    /// <summary>
    /// 해당 command가 실행 중일 때 매 프레임 마다 호출됩니다.
    /// agent가 매 프레임마다 할 행동을 정의합니다.
    /// agent의 행동을 이 메서드에서 정의하지 않고 ActionClassBase에서 정의하는 경우도 있습니다. ex) UseSkill
    /// </summary>
    /// <param name="agent"></param>
    public virtual void Execute(WorkerModel agent)
    {
    }
    public virtual void OnStop(WorkerModel agent)
    {
    }

    public void Finish()
    {
        isFinished = true;
    }

    public static AgentCommand MakeEscapeWorking(CreatureModel targetCreature)
    {
        AgentCommand cmd = new AgentCommand();
        cmd.type = AgentCmdType.ESCAPE_WORKING;
        cmd.targetCreature = targetCreature;
        return cmd;
    }
    public static AgentCommand MakeWorking(CreatureModel targetCreature)
    {
        AgentCommand cmd = new AgentCommand();
        cmd.type = AgentCmdType.MANAGE_CREATURE;
        cmd.targetCreature = targetCreature;
        //cmd.action = action;
        return cmd;
    }
    public static AgentCommand MakeReturnCreature()
    {
        AgentCommand cmd = new AgentCommand();
        cmd.type = AgentCmdType.RETURN_CREATURE;
        return cmd;
    }

    public static AgentCommand MakeOpenRoom()
    {
        AgentCommand cmd = new AgentCommand();
        cmd.type = AgentCmdType.OPEN_ROOM;
        return cmd;
    }

    public static AgentCommand MakeSuppressWorking(AgentModel targetAgent)
    {
        AgentCommand cmd = new AgentCommand();
        cmd.type = AgentCmdType.SUPPRESS_WORKING;
        cmd.targetAgent = targetAgent;
        return cmd;
    }

    public static AgentCommand MakeOpenDoor(DoorObjectModel door)
    {
        OpenDoorAgnetCommand cmd = new OpenDoorAgnetCommand(door);
        cmd.type = AgentCmdType.OPEN_DOOR;
        return cmd;
    }

    public static AgentCommand MakeCaptureByCreatue()
    {
        AgentCommand cmd = new AgentCommand();
        cmd.type = AgentCmdType.CAPTURE_BY_CREATURE;
        return cmd;
    }

    public static AgentCommand MakeMove(MapNode node)
    {
        MoveAgentCommand cmd = new MoveAgentCommand(node);
        cmd.type = AgentCmdType.MOVE;
        return cmd;
    }

    //public static AgentCommand MakePanic
}

public class MoveAgentCommand : AgentCommand
{
    //public MovableObjectNode targetNode;
    public MapNode targetNode;

    public MoveAgentCommand(MapNode targetNode)
    {
        this.targetNode = targetNode;
    }
    public override void OnStart(WorkerModel agent)
    {
        base.OnStart(agent);
        MovableObjectNode movable = agent.GetMovableNode();
        movable.MoveToNode(targetNode);
    }
    public override void Execute(WorkerModel agent)
    {
        base.Execute(agent);
        MovableObjectNode movable = agent.GetMovableNode();

        if (!movable.IsMoving())
        {
            movable.MoveToNode(targetNode);
        }

        if (movable.GetCurrentNode() != null && movable.GetCurrentNode().GetId() == targetNode.GetId())
        {
            Finish(); 
        }
    }
    public override void OnStop(WorkerModel agent)
    {
        base.OnStop(agent);
        MovableObjectNode movable = agent.GetMovableNode();
        movable.StopMoving();
    }
}

public class OpenDoorAgnetCommand : AgentCommand
{
    private DoorObjectModel door;
    private float elapsedTime;

    public OpenDoorAgnetCommand(DoorObjectModel door)
    {
        this.door = door;
        elapsedTime = 0;
    }

    public override void OnStart(WorkerModel agent)
    {
        base.OnStart(agent);
    }
    public override void Execute(WorkerModel agent)
    {
        base.Execute(agent);

        elapsedTime += Time.deltaTime;

        if (elapsedTime >= 0.5f)
        {
            door.Open();
            Finish();
        }
    }
    public override void OnStop(WorkerModel agent)
    {
        base.OnStop(agent);
    }
}

public class AgentCommandQueue
{
    private LinkedList<AgentCommand> queue;
    private WorkerModel agent;

    public AgentCommandQueue(WorkerModel agent)
    {
        queue = new LinkedList<AgentCommand>();
        this.agent = agent;
    }

    public AgentCommand GetCurrentCmd()
    {
        if (queue.Count <= 0)
        {
            return null;
        }
        return queue.First.Value;
    }

    /// <summary>
    /// command를 실행한다.
    /// </summary>
    public void Execute(WorkerModel agent)
    {
        if (queue.Count > 0)
        {
            AgentCommand cmd = queue.First.Value;

            cmd.Execute(agent);

            if (cmd.isFinished)
            {
                cmd.OnStop(agent);
                queue.RemoveFirst();
                if (queue.Count > 0)
                {
                    queue.First.Value.OnStart(agent);
                }
            }
        }
    }

    /// <summary>
    /// Idle 상태로 만든다
    /// </summary>
    public void Clear()
    {
        foreach (AgentCommand cmd in queue)
        {
            cmd.OnStop(agent);
        }
        queue.Clear();
    }

    public void SetAgentCommand(AgentCommand cmd)
    {
        foreach (AgentCommand oldCmd in queue)
        {
            oldCmd.OnStop(agent);
        }
        queue.Clear();
        queue.AddFirst(cmd);
        cmd.OnStart(agent);
    }

    public void AddFirst(AgentCommand cmd)
    {
        if (queue.Count > 0)
        {
            queue.First.Value.OnStop(agent);
        }
        queue.AddFirst(cmd);
        cmd.OnStart(agent);
    }

    public void AddLast(AgentCommand cmd)
    {
        queue.AddLast(cmd);
    }
}