// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

/// <summary>
/// AgentCommand 클래스에서 사용하는 명령어들.
/// 이동, 작업 등 기본적인 명령어들로 이루어져 있다.
/// 하나의 AgentCmdState는 일련의 AgentCommand들로 이루어져 있다.
/// 
/// AgentCmdState가 WORKING일 경우, (MOVE, WORKING)으로 이루어져 있다.
/// 
/// </summary>
public enum AgentCmdType
{
    NONE,
    MOVE,

	OBSERVE_CREATURE,
    MANAGE_CREATURE, // 격리소에 있는 환상체 관리

    CAPTURE_BY_CREATURE, // 환상체에게 붙잡힘
    CAPTURE_BY_AGENT, // 패닉 직원에게 붙잡힘

    PANIC_SUPPRESS_TARGET, // 제압당하는 중

    ESCAPE_WORKING,
    SUPPRESS_WORKING, // 제압중
    OPEN_ROOM,

    RETURN_CREATURE, // 환상체 돌려보내는 중

    OPEN_DOOR,

    PANIC_VIOLENCE, // 직원 패닉상태에서 공격 중
    DEAD
}


public class WorkerCommandQueue
{
    private LinkedList<WorkerCommand> queue;
    private WorkerModel agent;
    
    public WorkerCommandQueue(WorkerModel agent)
    {
        queue = new LinkedList<WorkerCommand>();
        this.agent = agent;
    }

    public WorkerCommand GetCurrentCmd()
    {
        if (queue.Count <= 0)
        {
            return null;
        }
        return queue.First.Value;
    }

    /// <summary>
    /// command를 실행한다.
    /// </summary>
    public void Execute(WorkerModel agent)
    {
        if (queue.Count > 0)
        {
            WorkerCommand cmd = queue.First.Value;

            cmd.Execute(agent);

            if (cmd.isFinished && queue.Count > 0 && queue.First.Value == cmd)
            {
                queue.RemoveFirst();
                cmd.OnStop(agent);
                cmd.OnDestroy(agent);

                if (queue.Count > 0)
                {
                    queue.First.Value.OnStart(agent);
                }
            }
        }
    }

    /// <summary>
    /// Idle 상태로 만든다
    /// </summary>
    public void Clear()
    {
        foreach (WorkerCommand cmd in queue)
        {
            cmd.OnStop(agent);
			cmd.OnDestroy (agent);
        }
        queue.Clear();
    }

    public void SetAgentCommand(WorkerCommand cmd)
    {
        foreach (WorkerCommand oldCmd in queue)
        {
            oldCmd.OnStop(agent);
        }
        queue.Clear();
        queue.AddFirst(cmd);
		cmd.OnInit (agent);
        cmd.OnStart(agent);
    }

    public void AddFirst(WorkerCommand cmd)
    {
        if (queue.Count > 0)
        {
            queue.First.Value.OnStop(agent);
        }
        queue.AddFirst(cmd);
		cmd.OnInit (agent);
        cmd.OnStart(agent);
    }

    public void AddLast(WorkerCommand cmd)
    {
        queue.AddLast(cmd);
		cmd.OnInit (agent);
    }
}